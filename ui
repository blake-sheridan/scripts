#!/usr/bin/env python3

from __future__ import annotations

import os
import subprocess
import sys


def main():
    try:
        (_, command, name) = sys.argv
    except ValueError:
        print('Usage:', sys.argv[0], '(select|focus)', '<name>')
        return

    display = Display()

    if command == 'select':
        display.do_select(name)
    elif command == 'focus':
        display.do_focus(name)
    else:
        raise NotImplementedError


class Display:
    """An object containing information about an X display."""

    def __init__(self):
        """Default constructor â€” use the current display."""
        self._display = os.environ['DISPLAY']

    # Commands

    def do_select(self, key: str) -> None:
        result = subprocess.run(['xdotool', 'selectwindow'], stdout=subprocess.PIPE)
        window_id = int(result.stdout.decode())

        with open(self._get_path(key), 'wb') as file:
            file.write(b'%d' % window_id)

    def do_focus(self, key: str) -> None:
        with open(self._get_path(key), 'rb') as file:
            window_id = int(file.read())

        subprocess.run(['xdotool', 'windowactivate', str(window_id)])

    # Helpers

    def _get_path(self, key: str) -> str:
        return os.path.join(os.environ['XDG_RUNTIME_DIR'], f'ui-{self._display}-{key}.id')


if __name__ == '__main__':
    main()
